import {envConfig, server} from "./config/env.config.js";
import 'dotenv/config';
import routes from "./routes/index.js";
import {initDatabase} from "./db/dbSetup.js";
import {standardLimiter} from "./middleware/rate-limit.js";
import {requestLogger} from "./middleware/request-logger.js";
import {errorHandler, notFoundHandler} from "./utils/error-handler.js";
import {logger} from "./utils/logger.js";
import {toNodeHandler} from "better-auth/node";
import cors from "cors";
import corsOptions from "./config/cors.config.js";
import express from "express";
import swaggerUi from 'swagger-ui-express';
import helmet from "helmet";
import {auth} from "./utils/auth.js";
import {readFileSync} from 'node:fs';

const hostUrl = "http://" + envConfig.server.host + ":" + envConfig.server.port
const apiDocs = envConfig.betterAuth.basePath + '/api-docs/'
const apiAuthDocs = envConfig.betterAuth.basePath + '/api-auth-docs/'

const authHandler = toNodeHandler(auth);


/*
   INITIALIZE EXPRESS APPLICATION 🏁
*/
export const app = express();

/*
   APPLICATION MIDDLEWARE AND CUSTOMIZATIONS 🪛
*/
app.disable("x-powered-by"); // Disable X-Powered-By header in responses

// app.use(cors(corsOptions)); // Enable Cross Origin Resource Sharing
// app.options("/{*any}", cors(corsOptions))

// Trust proxy for accurate IP addresses
app.set('trust proxy', 1);

// Apply rate limiting to all requests
app.use(standardLimiter);


//ENABLE BETTER-AUTH FOR ALL AUTH ROUTES
if (envConfig.server.nodeEnv  === 'production') {
// BetterAuth handler with additional debugging
    app.all('/api/auth/*splat', (req, res) => {
        logger.info(`🔐 BetterAuth handling: ${req.method} ${req.url}`);
        logger.info('🔐 Request body:', req.body);
        authHandler(req, res).catch(err => {
            console.error('BetterAuth handler error:', err);
            res.status(500).json({error: 'Internal auth error'});
        });
    });
}


// Register better-auth route BEFORE body parsers and helmet
// Mount express json middleware after Better Auth handler
// or only apply it to routes that don't interact with Better Auth
app.use(express.json());
app.use(helmet());
app.use(express.urlencoded({extended: true}));


/*
   GENERATE SWAGGER UI DOCS 🛣️
*/
if (envConfig.server.nodeEnv === 'development') {
    //Api Docs - You must generate api-swagger.json file by running npm run swagger
    try {
        let swaggerApiDocument = JSON.parse(readFileSync(envConfig.server.swaggerApiJsonPath, 'utf8'));
        if (swaggerApiDocument) {
            app.use(apiDocs, swaggerUi.serveFiles(swaggerApiDocument), swaggerUi.setup(swaggerApiDocument, {
                explorer: true,
                customCss: '.swagger-ui .topbar { display: none }',
                // customSiteTitle: "Express Better Auth API Documentation"
            }));
            logger.info('api-swagger.json loaded successfully!');
        }
    } catch (err) {
        logger.error(`Error reading JSON file: ${err}`);
    }

    //better-auth-api-docs better-auth-api-swagger.json file is automatically generated by better-auth plugin openapi
    try {
        let swaggerAuthApiDocument = JSON.parse(readFileSync(envConfig.server.swaggerBetterAuthApiJsonPath, 'utf8'));
        if (swaggerAuthApiDocument) {
            app.use(apiAuthDocs, swaggerUi.serveFiles(swaggerAuthApiDocument), swaggerUi.setup(swaggerAuthApiDocument, {
                explorer: true,
                customCss: '.swagger-ui .topbar { display: none }',
                // customSiteTitle: "Express Better Auth API Documentation"
            }));
            logger.info('better-auth-api-swagger.json loaded successfully!');
        }
    } catch (err) {
        logger.error(`Error reading JSON file: ${err}`);
    }

    //Test better-auth
    logger.info('🔧 Testing BetterAuth configuration...');
    try {
        await auth.api.getSession({
            headers: new Headers({
                'Content-Type': 'application/json',
            }),
        });
        logger.info('✅ BetterAuth configuration is valid');
    } catch (error) {
        console.error('❌ BetterAuth configuration error:', error);
    }
}

/*
   APPLICATION ROUTES 🛣️
*/
app.use("/api", routes);

//Log Requests
app.use(requestLogger);

// 404 handler
app.use(notFoundHandler);

// Global error handler
app.use(errorHandler);

// Start the server
const startServer = async () => {
    try {
        // Initialize database connection
        await initDatabase();
        // Start listening for requests
        app.listen(envConfig.server.port, envConfig.server.host, () => {
            logger.info(`🚀 Server running on : ${hostUrl}`);
            logger.info(`📚 API endpoints documentation : ${hostUrl}${apiDocs}`);
            logger.info(`🔐 Auth endpoints documentation  : ${hostUrl}${apiAuthDocs}`);
            logger.info(`🔧 Environment: ${envConfig.server.nodeEnv}`);
        });
    } catch (error) {
        logger.error("Failed to start server:", error);
        process.exit(1);
    }
};

// Handle unhandled rejections
process.on("unhandledRejection", (reason, promise) => {
    logger.error("Unhandled Rejection at:", {promise, reason});
});

// Handle uncaught exceptions
process.on("uncaughtException", (error) => {
    logger.error("Uncaught Exception:", error);
    process.exit(1);
});

// Start the server
startServer();

export default app;
